{
  "entries": [
    {
      "id": 1,
      "domanda": "Cos'è l'energia?",
      "varianti_domanda": [
        "Spiegami il concetto di energia",
        "Dammi una definizione di energia",
        "Cosa si intende per energia?"
      ],
      "risposta": "L'energia è una proprietà fondamentale dei sistemi fisici che si manifesta in varie forme e rappresenta la capacità di compiere lavoro. Può essere trasferita o convertita, ma non creata né distrutta.",
      "level": "general",
      "specificity_score": 10,
      "parent_concept": null,
      "followup_suggestions": [
        "Potrei spiegarti le diverse forme di energia (cinetica, potenziale, termica, ecc.).",
        "Vuoi sapere della Legge di Conservazione dell'Energia?"
      ],
      "related_ids": [2, 3],
      "category": "fisica"
    },
    {
      "id": 2,
      "domanda": "Cos'è l'energia cinetica?",
      "varianti_domanda": [
        "Spiegami energia cinetica",
        "Definizione di energia di movimento"
      ],
      "risposta": "L'energia cinetica è l'energia che un corpo possiede in virtù del suo movimento. Dipende dalla sua massa e dalla sua velocità (formula: 0.5 * massa * velocità^2).",
      "level": "specific",
      "specificity_score": 50,
      "parent_concept": 1,
      "followup_suggestions": [
        "Vuoi un esempio di calcolo dell'energia cinetica?",
        "Qual è la relazione con l'energia potenziale?"
      ],
      "related_ids": [3],
      "category": "fisica"
    },
    {
      "id": 3,
      "domanda": "Cos'è l'energia potenziale?",
      "varianti_domanda": [
        "Spiegami energia potenziale",
        "Definizione di energia di posizione"
      ],
      "risposta": "L'energia potenziale è l'energia immagazzinata in un corpo o sistema a causa della sua posizione o configurazione, pronta per essere convertita in altre forme di energia (es. energia potenziale gravitazionale).",
      "level": "specific",
      "specificity_score": 50,
      "parent_concept": 1,
      "followup_suggestions": [
        "Vuoi sapere dell'energia potenziale gravitazionale?",
        "Qual è la relazione con l'energia cinetica?"
      ],
      "related_ids": [2],
      "category": "fisica"
    },
    {
      "id": 4,
      "domanda": "Cos'è un voltmetro?",
      "varianti_domanda": [
        "Spiegami voltmetro",
        "A cosa serve il voltmetro?"
      ],
      "risposta": "Un voltmetro è uno strumento utilizzato per misurare la differenza di potenziale elettrico, o tensione, tra due punti in un circuito elettrico. Si collega in parallelo al componente da misurare.",
      "level": "specific",
      "specificity_score": 80,
      "parent_concept": null,
      "followup_suggestions": [
        "Vuoi sapere come si usa un voltmetro?",
        "Qual è la differenza tra un voltmetro e un amperometro?"
      ],
      "related_ids": [],
      "category": "elettronica"
    },
    {
      "id": 5,
      "domanda": "Chi ha inventato la lampadina?",
      "varianti_domanda": [
        "Invento lampadina",
        "Quando hanno inventato la lampadina?"
      ],
      "risposta": "La lampadina a incandescenza, come la conosciamo, è stata inventata da Thomas Edison nel 1879, anche se molti scienziati prima di lui avevano contribuito allo sviluppo dell'illuminazione elettrica.",
      "level": "general",
      "specificity_score": 20,
      "parent_concept": null,
      "followup_suggestions": [
        "Vuoi sapere come funziona una lampadina?",
        "Quali sono le diverse tecnologie di illuminazione?"
      ],
      "related_ids": [],
      "category": "storia della scienza"
    },
    {
      "id": 6,
      "domanda": "Cos'è il Well Control?",
      "varianti_domanda": [
        "Definizione Well Control",
        "Spiegazione Well Control",
        "A cosa serve il Well Control?"
      ],
      "risposta": "Il Well Control (Controllo Pozzo) è l'insieme delle procedure e delle attrezzature utilizzate per prevenire le fuoriuscite incontrollate di fluidi dal pozzo (blowout) durante le operazioni di perforazione o completamento. Il suo obiettivo primario è mantenere l'integrità del pozzo e garantire la sicurezza del personale e dell'ambiente.",
      "level": "general",
      "specificity_score": 20,
      "parent_concept": null,
      "followup_suggestions": [
        "Quali sono i principi base del Well Control?",
        "Qual è l'attrezzatura principale per il Well Control?"
      ],
      "related_ids": [7],
      "category": "oil_gas, well_control, sicurezza"
    },
    {
      "id": 7,
      "domanda": "Qual è l'attrezzatura principale del Well Control?",
      "varianti_domanda": [
        "Attrezzature Well Control",
        "Strumenti Well Control",
        "Componenti Well Control"
      ],
      "risposta": "L'attrezzatura principale del Well Control include il Blowout Preventer (BOP), le choke manifold, i serbatoi di fango (mud tanks), le pompe di fango e il sistema di controllo del BOP (CCU/Koomey Unit).",
      "level": "specific",
      "specificity_score": 30,
      "parent_concept": 6,
      "followup_suggestions": [
        "Spiegami cos'è il BOP.",
        "Cosa fa una choke manifold?"
      ],
      "related_ids": [8, 9],
      "category": "oil_gas, well_control, attrezzatura"
    },
    {
      "id": 8,
      "domanda": "Cos'è un Blowout Preventer (BOP)?",
      "varianti_domanda": [
        "Definizione BOP",
        "Spiegami il BOP",
        "A cosa serve il BOP?"
      ],
      "risposta": "Il Blowout Preventer (BOP) è una serie di valvole meccaniche di grandi dimensioni installate alla testa del pozzo o sul fondale marino (per i pozzi sottomarini). La sua funzione critica è sigillare l'annulus o il foro del pozzo in caso di kick (influsso incontrollato di fluidi) per prevenire un blowout.",
      "level": "general",
      "specificity_score": 40,
      "parent_concept": 7,
      "followup_suggestions": [
        "Quali tipi di BOP esistono?",
        "Come funziona un BOP?"
      ],
      "related_ids": [10, 11],
      "category": "oil_gas, BOP, attrezzatura, well_control"
    },
    {
      "id": 9,
      "domanda": "Quanti tipi di BOP esistono?",
      "varianti_domanda": [
        "Tipi di BOP",
        "Classificazione BOP",
        "Quali sono i BOP?"
      ],
      "risposta": "Esistono principalmente due tipi di BOP: i BOP ad anello (annular preventers), che sigillano attorno a qualsiasi forma nel pozzo, e i BOP a ganasce (ram preventers), che sigillano il pozzo utilizzando ganasce di diverse forme (tubo, cieche, a taglio).",
      "level": "specific",
      "specificity_score": 50,
      "parent_concept": 8,
      "followup_suggestions": [
        "Spiegami il BOP ad anello.",
        "Come funzionano le ganasce del BOP?"
      ],
      "related_ids": [8],
      "category": "oil_gas, BOP, classificazione"
    },
    {
      "id": 10,
      "domanda": "Cos'è una Koomey Unit?",
      "varianti_domanda": [
        "Definizione Koomey",
        "Funzione Koomey Unit",
        "Central Control Unit BOP"
      ],
      "risposta": "La Koomey Unit (o Unità di Controllo BOP) è il sistema di controllo idraulico situato in superficie (o a bordo della piattaforma) che serve ad azionare a distanza le valvole del BOP sottomarino o di superficie. Mantiene la pressione nei circuiti idraulici per garantire l'attivazione rapida del BOP in caso di emergenza.",
      "level": "specific",
      "specificity_score": 60,
      "parent_concept": 7,
      "followup_suggestions": [
        "Come funziona il sistema idraulico di una Koomey Unit?",
        "Quali test si fanno sulla Koomey Unit?"
      ],
      "related_ids": [8],
      "category": "oil_gas, BOP, controllo, attrezzatura"
    },
    {
      "id": 11,
      "domanda": "Come funziona un BOP sottomarino?",
      "varianti_domanda": [
        "Funzionamento BOP subsea",
        "Meccanismo BOP sottomarino",
        "Come si aziona un BOP sottomarino?"
      ],
      "risposta": "Un BOP sottomarino è installato sul fondale e controllato da una CCU (Control Command Unit) tramite cavi ombelicali o acusticamente. Riceve comandi idraulici o elettrici per chiudere le sue valvole (anulare o a ganasce) e sigillare il pozzo.",
      "level": "specific",
      "specificity_score": 70,
      "parent_concept": 8,
      "followup_suggestions": [
        "Cos'è la CCU di un BOP sottomarino?",
        "Quali sono le differenze tra BOP di superficie e sottomarino?"
      ],
      "related_ids": [12],
      "category": "oil_gas, BOP, sottomarino, funzionamento"
    },
    {
      "id": 12,
      "domanda": "Cos'è la CCU (Control Command Unit) di un BOP sottomarino?",
      "varianti_domanda": [
        "Definizione CCU BOP",
        "Funzione CCU BOP subsea",
        "Centro di controllo BOP"
      ],
      "risposta": "La CCU è il cuore del sistema di controllo di un BOP sottomarino. È un'unità elettronica e idraulica che riceve comandi dalla superficie e li traduce in azioni fisiche per aprire o chiudere le valvole del BOP, monitorando costantemente lo stato del pozzo.",
      "level": "specific",
      "specificity_score": 80,
      "parent_concept": 11,
      "followup_suggestions": [
        "Quali sono le ridondanze in una CCU?",
        "Come avviene la comunicazione tra superficie e CCU?"
      ],
      "related_ids": [8],
      "category": "oil_gas, BOP, CCU, controllo, sottomarino"
    },
    {
      "id": 13,
      "domanda": "Quali sono i principi base del Well Control?",
      "varianti_domanda": [
        "Principi Well Control",
        "Concetti fondamentali Well Control"
      ],
      "risposta": "I principi base del Well Control si concentrano sul bilanciamento delle pressioni nel pozzo. Ciò include il mantenimento di una pressione idrostatica superiore alla pressione di formazione, il rilevamento rapido di kick, e l'isolamento e la circolazione del kick in modo sicuro fuori dal pozzo.",
      "level": "specific",
      "specificity_score": 40,
      "parent_concept": 6,
      "followup_suggestions": [
        "Come si rileva un kick?",
        "Qual è la funzione del fango di perforazione nel Well Control?"
      ],
      "related_ids": [],
      "category": "oil_gas, well_control, principi"
    },
    {
      "id": 14,
      "domanda": "Cos'è una Choke Manifold?",
      "varianti_domanda": [
        "Definizione Choke Manifold",
        "Funzione Choke Manifold"
      ],
      "risposta": "La choke manifold è un insieme di valvole e strozzatori (chokes) utilizzato per controllare la contropressione sul pozzo e deviare i fluidi in caso di kick, permettendo di mantenere il controllo della pressione del pozzo in modo graduale e sicuro.",
      "level": "specific",
      "specificity_score": 60,
      "parent_concept": 7,
      "followup_suggestions": [
        "Come si opera una choke manifold?",
        "Quali tipi di chokes esistono?"
      ],
      "related_ids": [],
      "category": "oil_gas, well_control, attrezzatura"
    },
    {
      "id": 15,
      "domanda": "Quali test si eseguono sul BOP?",
      "varianti_domanda": [
        "Test BOP",
        "Frequenza test BOP",
        "Come si testa il BOP?"
      ],
      "risposta": "I BOP vengono sottoposti a test di pressione periodici, spesso ogni 7, 14 o 21 giorni (a seconda delle normative e del tipo di operazione) o dopo specifici interventi. I test verificano l'integrità del sistema per assicurare che possa sigillare il pozzo in caso di emergenza.",
      "level": "specific",
      "specificity_score": 70,
      "parent_concept": 8,
      "followup_suggestions": [
        "Quali sono le normative API per i test BOP?",
        "Cosa indica un fallimento del test BOP?"
      ],
      "related_ids": [],
      "category": "oil_gas, BOP, test, sicurezza"
    },
    {
      "id": 16,
      "domanda": "Cos'è un algoritmo?",
      "varianti_domanda": [
        "Definizione di algoritmo",
        "Spiegami cos'è un algoritmo"
      ],
      "risposta": "Un algoritmo è una sequenza finita e ordinata di passaggi o istruzioni, progettata per risolvere un problema specifico o eseguire un compito. È alla base di qualsiasi programma per computer.",
      "level": "general",
      "specificity_score": 30,
      "parent_concept": null,
      "followup_suggestions": [
        "Vuoi un esempio di algoritmo?",
        "Qual è la differenza tra un algoritmo e un programma?"
      ],
      "related_ids": [17, 18],
      "category": "informatica"
    },
    {
      "id": 17,
      "domanda": "Cos'è un linguaggio di programmazione?",
      "varianti_domanda": [
        "Cosa sono i linguaggi di programmazione?",
        "Definizione di linguaggio di programmazione"
      ],
      "risposta": "Un linguaggio di programmazione è un linguaggio formale che fornisce ai programmatori un insieme di istruzioni per produrre output di vario tipo. Viene utilizzato per creare programmi che implementano algoritmi specifici.",
      "level": "general",
      "specificity_score": 35,
      "parent_concept": 16,
      "followup_suggestions": [
        "Quali sono i principali linguaggi di programmazione?",
        "Parlami del linguaggio Python"
      ],
      "related_ids": [18],
      "category": "informatica"
    },
    {
      "id": 18,
      "domanda": "Cos'è Python?",
      "varianti_domanda": [
        "Parlami di Python",
        "Cos'è il linguaggio Python?"
      ],
      "risposta": "Python è un linguaggio di programmazione di alto livello, interpretato, generico e multi-paradigma. È noto per la sua sintassi semplice e leggibile, che lo rende ideale per principianti, sviluppo rapido, scripting, intelligenza artificiale e analisi dei dati.",
      "level": "specific",
      "specificity_score": 50,
      "parent_concept": 17,
      "followup_suggestions": [],
      "related_ids": [],
      "category": "informatica"
    },
    {
      "id": 19,
      "domanda": "Cos'è la forza di gravità?",
      "varianti_domanda": [
        "Spiegami la gravità",
        "Cos'è la gravità"
      ],
      "risposta": "La forza di gravità è una delle quattro forze fondamentali della natura. È una forza di attrazione che agisce tra due corpi dotati di massa. È la forza che ci tiene ancorati alla Terra e che governa il moto dei pianeti.",
      "level": "general",
      "specificity_score": 30,
      "parent_concept": null,
      "followup_suggestions": [
        "Chi ha formulato la legge di gravitazione universale?",
        "Cos'è un buco nero?"
      ],
      "related_ids": [20],
      "category": "fisica"
    },
    {
      "id": 20,
      "domanda": "Chi era Isaac Newton?",
      "varianti_domanda": [
        "Parlami di Isaac Newton",
        "Cosa ha fatto Newton?"
      ],
      "risposta": "Sir Isaac Newton è stato un matematico, fisico e astronomo inglese, considerato uno dei più grandi scienziati di tutti i tempi. È famoso per aver formulato le leggi del moto e la legge di gravitazione universale.",
      "level": "specific",
      "specificity_score": 45,
      "parent_concept": 19,
      "followup_suggestions": [],
      "related_ids": [],
      "category": "storia della scienza"
    },
    {
      "id": 21,
      "domanda": "Cos'è l'inerzia?",
      "varianti_domanda": [
        "Spiegami il principio di inerzia",
        "Definizione di inerzia"
      ],
      "risposta": "L'inerzia è la tendenza di un corpo a mantenere il proprio stato di quiete o di moto rettilineo uniforme, a meno che non intervenga una forza esterna a modificarlo. È descritta dalla Prima Legge del Moto di Newton.",
      "level": "general",
      "specificity_score": 40,
      "parent_concept": 19,
      "followup_suggestions": [],
      "related_ids": [20],
      "category": "fisica"
    },
    {
      "id": 22,
      "domanda": "Cos'è l'intelligenza artificiale?",
      "varianti_domanda": [
        "Definizione di IA",
        "Cosa significa AI?"
      ],
      "risposta": "L'Intelligenza Artificiale (IA o AI in inglese) è una branca dell'informatica che si occupa della creazione di sistemi in grado di eseguire compiti che normalmente richiedono l'intelligenza umana, come il ragionamento, l'apprendimento, la percezione e la risoluzione di problemi.",
      "level": "general",
      "specificity_score": 30,
      "parent_concept": 16,
      "followup_suggestions": [
        "Quali sono i diversi tipi di IA?",
        "Cos'è il machine learning?"
      ],
      "related_ids": [23],
      "category": "informatica"
    },
    {
      "id": 23,
      "domanda": "Cos'è il machine learning?",
      "varianti_domanda": [
        "Definizione di machine learning",
        "Spiegami l'apprendimento automatico"
      ],
      "risposta": "Il Machine Learning (apprendimento automatico) è un sottoinsieme dell'Intelligenza Artificiale. Si concentra sullo sviluppo di algoritmi che permettono a un computer di imparare dai dati e migliorare le proprie prestazioni nel tempo senza essere esplicitamente programmato per ogni compito.",
      "level": "specific",
      "specificity_score": 55,
      "parent_concept": 22,
      "followup_suggestions": [],
      "related_ids": [],
      "category": "informatica"
    },
    {
      "id": 24,
      "domanda": "Qual è la capitale d'Italia?",
      "varianti_domanda": [
        "Capitale Italia",
        "Dimmi la capitale d'Italia"
      ],
      "risposta": "La capitale d'Italia è Roma.",
      "level": "very_specific",
      "specificity_score": 10,
      "parent_concept": null,
      "followup_suggestions": [],
      "related_ids": [],
      "category": "geografia"
    },
    {
      "id": 25,
      "domanda": "Come funziona un motore a combustione interna?",
      "varianti_domanda": [
        "Spiegami il motore a scoppio",
        "Funzionamento motore auto"
      ],
      "risposta": "Un motore a combustione interna converte l'energia chimica di un carburante in energia meccanica. Il processo avviene in quattro fasi (o tempi): aspirazione della miscela aria-carburante, compressione, combustione (o scoppio) che spinge il pistone, e scarico dei gas combusti.",
      "level": "general",
      "specificity_score": 40,
      "parent_concept": null,
      "followup_suggestions": [],
      "related_ids": [],
      "category": "ingegneria"
    },
    {
      "id": 26,
      "domanda": "Cos'è il test-driven development?",
      "varianti_domanda": [
        "Puoi spiegarmi TDD?",
        "Come funziona il test-driven development?",
        "Quali sono i principi del TDD?",
        "Perché dovrei usare TDD nei miei progetti?"
      ],
      "risposta": "Il Test-Driven Development (TDD) è una metodologia di sviluppo software in cui prima si scrivono i test automatizzati che definiscono i requisiti del codice, e solo successivamente si implementa il codice per superare questi test. Il ciclo TDD segue il pattern Red-Green-Refactor: 1) Scrivi un test che fallisce (Red), 2) Scrivi il minimo codice necessario per far passare il test (Green), 3) Migliora il codice mantenendo il test funzionante (Refactor). I vantaggi del TDD includono codice più robusto, documentazione viva attraverso i test, e design più modulare e orientato all'uso.",
      "level": "intermediate",
      "category": "metodologie_sviluppo"
    },
    {
      "id": 27,
      "domanda": "Come gestire le dipendenze in Python?",
      "varianti_domanda": [
        "Qual è il modo migliore per gestire i pacchetti in Python?",
        "Cosa sono pip, venv e requirements.txt?",
        "Come isolo l'ambiente di sviluppo in Python?",
        "Differenza tra virtualenv e conda in Python"
      ],
      "risposta": "In Python, le dipendenze si gestiscono principalmente con: 1) pip: il package installer di Python per installare pacchetti da PyPI. 2) Ambienti virtuali: come venv (integrato in Python 3.3+), virtualenv o conda, che creano ambienti isolati per ogni progetto, evitando conflitti tra pacchetti. 3) requirements.txt: file che elenca tutte le dipendenze con versioni specifiche, generato con 'pip freeze > requirements.txt' e installabile con 'pip install -r requirements.txt'. 4) Strumenti moderni: Poetry o Pipenv, che combinano gestione delle dipendenze e ambienti virtuali. La best practice è sempre utilizzare un ambiente virtuale per progetto e documentare le dipendenze in un file requirements.txt o equivalente.",
      "level": "beginner",
      "category": "python"
    },
    {
      "id": 28,
      "domanda": "Cos'è Git branching e perché è utile?",
      "varianti_domanda": [
        "Come funzionano i branch in Git?",
        "Qual è lo scopo di creare branch diversi in Git?",
        "Strategia migliore per usare i branch in Git",
        "Come gestire feature branch in un progetto?"
      ],
      "risposta": "Git branching è una funzionalità che permette di divergere dalla linea principale di sviluppo (master/main) creando rami separati per lavorare su funzionalità o correzioni senza influenzare il codice principale. I branch sono utili perché: 1) Permettono lo sviluppo parallelo di più funzionalità da parte di diversi sviluppatori. 2) Isolano il lavoro sperimentale dal codice stabile. 3) Facilitano il processo di revisione del codice prima dell'integrazione. 4) Supportano i flussi di lavoro come Git Flow o GitHub Flow. Una strategia comune è creare un branch per ogni nuova feature o bugfix, testarlo separatamente, e poi unirlo al branch principale tramite pull request o merge dopo la revisione.",
      "level": "intermediate",
      "category": "git"
    },
    {
      "id": 29,
      "domanda": "Qual è la differenza tra = e == in Python?",
      "varianti_domanda": [
        "Cosa significano = e == in Python?",
        "Quando usare = e quando == in Python?",
        "Operatore di assegnazione vs operatore di uguaglianza in Python",
        "= vs == in Python: spiegazione"
      ],
      "risposta": "In Python, '=' e '==' hanno scopi completamente diversi: 1) '=' è l'operatore di assegnazione. Viene usato per assegnare un valore a una variabile (es. x = 5). 2) '==' è l'operatore di confronto di uguaglianza. Viene usato per verificare se due valori sono uguali, restituendo True o False (es. if x == 5:). Confondere i due è un errore comune: usare '=' in una condizione assegnerà un valore invece di confrontarlo, mentre usare '==' per assegnare un valore genererà un errore di sintassi. Per confronti di identità (stesso oggetto in memoria), Python offre anche l'operatore 'is'.",
      "level": "beginner",
      "category": "python"
    },
    {
      "id": 30,
      "domanda": "Cosa sono i design pattern e perché sono importanti?",
      "varianti_domanda": [
        "Quali sono i principali design pattern in programmazione?",
        "Come i design pattern migliorano il codice?",
        "Esempi di design pattern comuni",
        "Pattern di progettazione software più utilizzati"
      ],
      "risposta": "I design pattern sono soluzioni generali e riutilizzabili a problemi ricorrenti nella progettazione del software. Sono importanti perché: 1) Forniscono template testati per risolvere problemi comuni. 2) Creano un vocabolario condiviso tra sviluppatori. 3) Rendono il codice più manutenibile e flessibile. I pattern principali si dividono in: Creazionali (come Singleton, Factory, Builder), che gestiscono la creazione di oggetti; Strutturali (come Adapter, Decorator, Proxy), che definiscono relazioni tra oggetti; Comportamentali (come Observer, Strategy, Command), che gestiscono la comunicazione tra oggetti. Un buon sviluppatore non applica pattern ovunque, ma li usa solo quando appropriato per evitare complessità non necessaria.",
      "level": "intermediate",
      "category": "programmazione"
    },
    {
      "id": 31,
      "domanda": "Come gestire le eccezioni in Python?",
      "varianti_domanda": [
        "Come funziona try-except in Python?",
        "Best practice per la gestione degli errori in Python",
        "Come creare eccezioni personalizzate in Python?",
        "Try, except, finally e else in Python: come si usano?"
      ],
      "risposta": "In Python, le eccezioni si gestiscono con i blocchi try-except. Struttura base: try: (codice che potrebbe generare errori), except Exception as e: (gestione dell'errore). Si possono catturare eccezioni specifiche (ValueError, TypeError) o multiple con except diversi. Il blocco 'else' si esegue se non ci sono eccezioni, mentre 'finally' si esegue sempre, con o senza eccezioni. Best practice: 1) Catturare solo eccezioni specifiche, non tutte genericamente. 2) Gestire l'eccezione vicino alla fonte. 3) Rilasciare risorse in blocchi finally. 4) Creare eccezioni personalizzate ereditando da Exception (class MioErrore(Exception): pass). 5) Usare with per risorse che richiedono chiusura (file, connessioni DB).",
      "level": "intermediate",
      "category": "python"
    },
    {
      "id": 32,
      "domanda": "Cosa sono i Python decorators?",
      "varianti_domanda": [
        "Come funzionano i decoratori in Python?",
        "Come scrivere un decorator personalizzato in Python?",
        "Esempi di uso dei decoratori in Python",
        "@property e altri decoratori built-in in Python"
      ],
      "risposta": "I decoratori in Python sono funzioni speciali che modificano il comportamento di altre funzioni o metodi. Sono identificati dal simbolo @ sopra la definizione di una funzione. Un decoratore prende una funzione come input, aggiunge funzionalità, e restorna una nuova funzione senza modificare il codice originale. Esempio base: '@timer\\ndef funzione(): pass' equivale a 'funzione = timer(funzione)'. I decoratori sono utili per: 1) Logging e debugging. 2) Controllo accessi e autenticazione. 3) Memoizzazione (caching). 4) Misurazione del tempo di esecuzione. Python include decoratori built-in utili come @property, @classmethod, @staticmethod. I decoratori avanzati possono accettare argomenti e si possono implementare anche come classi.",
      "level": "advanced",
      "category": "python"
    },
    {
      "id": 33,
      "domanda": "Come ottimizzare le prestazioni di un'applicazione Python?",
      "varianti_domanda": [
        "Tecniche per velocizzare codice Python",
        "Come profilare e migliorare l'efficienza in Python?",
        "Alternative a Python puro per codice ad alte prestazioni",
        "Strumenti per l'ottimizzazione di codice Python"
      ],
      "risposta": "Per ottimizzare le prestazioni di un'applicazione Python: 1) Profilazione: usa cProfile, line_profiler o memory_profiler per identificare i colli di bottiglia. 2) Usa strutture dati appropriate: set per ricerche, collections.deque per code, ecc. 3) Ottimizza algoritmi: riduce la complessità computazionale. 4) List/Dictionary comprehension invece di cicli for. 5) Estensioni C/C++: NumPy per operazioni su array, Cython per codice critico. 6) Parallelismo: multiprocessing per CPU-bound, asyncio per I/O-bound. 7) Caching: funzionalità@lru_cache, Redis. 8) JIT compilation: PyPy invece di CPython. 9) Database: ottimizzare query, usare indici. Ricorda: prima ottimizza algoritmi e strutture, poi misura di nuovo, e solo dopo considera ottimizzazioni di basso livello.",
      "level": "advanced",
      "category": "performance"
    },
    {
      "id": 34,
      "domanda": "Cos'è il clean code e perché è importante?",
      "varianti_domanda": [
        "Principi di clean code in programmazione",
        "Come scrivere codice più leggibile e manutenibile",
        "Pratiche di clean code secondo Robert C. Martin",
        "Vantaggi dello scrivere clean code nel lungo termine"
      ],
      "risposta": "Il clean code è codice facile da leggere, comprendere e modificare da qualsiasi sviluppatore, non solo dall'autore originale. È importante perché: 1) La maggior parte del tempo di sviluppo è speso leggendo codice esistente. 2) Il codice viene letto molto più di quanto viene scritto. 3) Riduce i bug e facilita il debugging. I principi fondamentali includono: nomi significativi di variabili e funzioni; funzioni piccole con un solo scopo; commenti solo quando necessari; formattazione coerente; eliminazione di codice duplicato; gestione degli errori appropriata; testing adeguato. Secondo Robert C. Martin, un codice pulito fa una cosa sola, la fa bene, ed esprime chiaramente il suo intento. Investire in clean code aumenta la produttività a lungo termine, anche se richiede più tempo inizialmente.",
      "level": "intermediate",
      "category": "best_practices"
    },
    {
      "id": 35,
      "domanda": "Come contribuire a progetti open source?",
      "varianti_domanda": [
        "Da dove iniziare per contribuire all'open source?",
        "Passi per fare la prima pull request su GitHub",
        "Come trovare progetti open source adatti ai principianti",
        "Etichetta e best practice per contribuire a progetti open source"
      ],
      "risposta": "Per contribuire a progetti open source: 1) Inizia familiarizzando con Git e GitHub. 2) Trova un progetto che ti interessa: usa GitHub Explore, firstcontributions.github.io o etichette 'good first issue'. 3) Leggi la documentazione, soprattutto CONTRIBUTING.md e il Code of Conduct. 4) Inizia con contributi piccoli: correzioni di documentazione, bug minori. 5) Processo tipico: fork del repository, crea branch, implementa modifiche, testa, commit, push e apri pull request. 6) Nella PR, descrivi chiaramente cosa hai fatto e perché. 7) Rispondi prontamente ai feedback dei maintainer. 8) Sii paziente e rispettoso: i maintainer sono spesso volontari. Le contribuzioni open source migliorano le tue competenze, costruiscono il tuo portfolio e ti connettono con la comunità di sviluppatori.",
      "level": "beginner",
      "category": "open_source"
    },
    {
      "id": 36,
      "domanda": "Cos'è Docker e come funziona?",
      "varianti_domanda": [
        "Come usare Docker per sviluppo software?",
        "Differenza tra Docker e macchine virtuali",
        "Vantaggi di containerizzazione con Docker",
        "Componenti principali dell'ecosistema Docker"
      ],
      "risposta": "Docker è una piattaforma open-source che automatizza il deployment di applicazioni all'interno di container software. I container impacchettano il codice, le dipendenze e le configurazioni necessarie, garantendo che l'applicazione funzioni allo stesso modo in qualsiasi ambiente. A differenza delle macchine virtuali, i container condividono il kernel del sistema operativo host, risultando più leggeri ed efficienti. I componenti principali sono: 1) Docker Engine (runtime per eseguire i container), 2) Dockerfile (script per costruire immagini), 3) Docker Hub (repository di immagini condivise), 4) Docker Compose (strumento per gestire applicazioni multi-container). I vantaggi includono consistenza tra ambienti di sviluppo/produzione, isolamento delle applicazioni, rapido deployment, efficienza delle risorse e scalabilità. La containerizzazione è diventata fondamentale nel DevOps moderno e nell'architettura a microservizi.",
      "level": "intermediate",
      "category": "devops"
    },
    {
      "id": 37,
      "domanda": "Come funzionano le list comprehension in Python?",
      "varianti_domanda": [
        "Sintassi e vantaggi delle list comprehension",
        "Come convertire un ciclo for in list comprehension",
        "Esempi di list, dict e set comprehension in Python",
        "List comprehension vs map e filter in Python"
      ],
      "risposta": "Le list comprehension in Python sono un modo conciso e leggibile per creare liste basate su sequenze esistenti. Sintassi base: [espressione for elemento in iterabile if condizione]. Ad esempio, [x*2 for x in range(10) if x%2==0] crea una lista con i doppi dei numeri pari da 0 a 9. I vantaggi includono: 1) Codice più compatto e leggibile. 2) Migliori performance rispetto ai loop tradizionali. 3) Espressività funzionale. Oltre alle list comprehension, Python supporta dict comprehension {chiave:valore for elemento in iterabile} e set comprehension {elemento for elemento in iterabile}. Le comprehension possono sostituire combinazioni di map() e filter(), ma per operazioni complesse o quando la leggibilità è compromessa, i loop tradizionali o le funzioni map/filter possono essere preferibili. È buona pratica evitare comprehension troppo complesse o annidate che potrebbero rendere il codice difficile da capire.",
      "level": "beginner",
      "category": "python"
    },
    {
      "id": 38,
      "domanda": "Come gestire i conflitti in Git?",
      "varianti_domanda": [
        "Cosa fare quando si presenta un conflitto in Git?",
        "Strumenti per risolvere conflitti di merge in Git",
        "Come prevenire conflitti nei repository Git",
        "Strategie per gestire merge conflicts"
      ],
      "risposta": "I conflitti in Git si verificano quando due branch modificano le stesse righe di un file e Git non può determinare automaticamente quale versione conservare. Per risolvere un conflitto: 1) Esegui 'git status' per identificare i file in conflitto. 2) Apri i file contrassegnati, troverai sezioni delimitate da '<<<<<<< HEAD', '=======' e '>>>>>>> branch-name'. 3) Modifica manualmente il file per riflettere lo stato desiderato, rimuovendo i delimitatori. 4) Esegui 'git add' per marcare il conflitto come risolto. 5) Completa il merge con 'git commit'. Strumenti utili: editor con supporto Git (VS Code, IntelliJ), 'git mergetool', interfacce grafiche come GitKraken. Per prevenire conflitti: 1) Pull/rebase frequentemente. 2) Suddividi il lavoro in commit piccoli e frequenti. 3) Comunica con il team sui file che stai modificando. 4) Usa feature branch brevi. 5) Standardizza la formattazione del codice con linter/formatter automatici.",
      "level": "intermediate",
      "category": "git"
    },
    {
      "id": 39,
      "domanda": "Cos'è REST API e come funziona?",
      "varianti_domanda": [
        "Principi delle API RESTful",
        "Come progettare una REST API",
        "Differenze tra REST, GraphQL e SOAP",
        "HTTP methods nelle REST API"
      ],
      "risposta": "REST (REpresentational State Transfer) è uno stile architetturale per la progettazione di API web che utilizza HTTP per comunicare. I principi chiave sono: 1) Architettura client-server: separazione di responsabilità. 2) Stateless: ogni richiesta contiene tutte le informazioni necessarie. 3) Cacheable: le risposte devono dichiarare se sono cacheable. 4) Sistema a strati: il client non sa se comunica direttamente col server finale. 5) Interfaccia uniforme: identificazione delle risorse, manipolazione tramite rappresentazioni, messaggi auto-descrittivi e HATEOAS. Le REST API usano metodi HTTP standard: GET (lettura), POST (creazione), PUT/PATCH (aggiornamento), DELETE (rimozione). Le risorse sono identificate da URL, come '/users/123'. A differenza di SOAP, REST è più leggero e utilizza principalmente JSON, mentre GraphQL offre maggiore flessibilità nelle query ma con implementazione più complessa. Una buona REST API dovrebbe avere versioning, documentazione chiara (es. con Swagger/OpenAPI), gestione appropriata degli errori e seguire le best practice di sicurezza.",
      "level": "intermediate",
      "category": "web_development"
    },
    {
      "id": 40,
      "domanda": "Cos'è la programmazione asincrona in Python?",
      "varianti_domanda": [
        "Come usare async e await in Python?",
        "Differenza tra threading, multiprocessing e asyncio in Python",
        "Vantaggi della programmazione asincrona",
        "Esempi di asyncio in Python"
      ],
      "risposta": "La programmazione asincrona in Python permette di eseguire operazioni senza bloccare l'esecuzione del programma, particolarmente utile per operazioni I/O-bound come richieste di rete o accesso a file. Dal Python 3.5+, si implementa principalmente con le keyword 'async' e 'await' e il modulo asyncio. Un esempio base: 'async def fetch_data(): await asyncio.sleep(1); return \"data\"'. Per eseguire funzioni asincrone: 'asyncio.run(main())'. A differenza del threading, asyncio usa un singolo thread con un event loop che gestisce task concorrenti, evitando overhead e problemi di thread safety. Rispetto al multiprocessing, è più leggero ma non sfrutta più core CPU per task CPU-bound. I vantaggi includono: 1) Alta concorrenza con basso overhead. 2) Codice sequenziale facile da leggere. 3) Ottimo per applicazioni I/O intensive come server web, scraping o API client. Limitazioni: richiede che tutte le operazioni blocanti siano 'awaitable', e il codice sincrono può bloccare l'intero event loop.",
      "level": "advanced",
      "category": "python"
    },
    {
      "id": 41,
      "domanda": "Come funzionano gli hash e la crittografia in informatica?",
      "varianti_domanda": [
        "Differenza tra algoritmi di hashing e crittografia",
        "Come memorizzare password in modo sicuro",
        "Cosa sono MD5, SHA, AES e RSA",
        "Best practice di sicurezza per la protezione dei dati"
      ],
      "risposta": "Hashing e crittografia sono fondamentali per la sicurezza informatica ma servono scopi diversi. L'hashing trasforma i dati in una stringa fissa (digest) in modo irreversibile; è usato per verificare l'integrità dei dati e memorizzare password. Algoritmi comuni sono SHA-256, SHA-3 e bcrypt (specifico per password con salt e fattore di costo). La crittografia invece trasforma i dati per renderli illeggibili senza la chiave appropriata ed è reversibile. Si divide in simmetrica (stessa chiave per cifrare/decifrare, es. AES) e asimmetrica (coppia di chiavi pubblica/privata, es. RSA). Per memorizzare password in modo sicuro: 1) Mai salvare in chiaro. 2) Usare algoritmi di hashing specifici per password (bcrypt, Argon2, PBKDF2). 3) Aggiungere salt unici e random. 4) Implementare rate limiting e ritardi sui tentativi di login. 5) Verificare regolarmente la robustezza del sistema contro nuovi attacchi. MD5 e SHA-1 sono considerati obsoleti per usi di sicurezza a causa di vulnerabilità note.",
      "level": "intermediate",
      "category": "sicurezza"
    },
    {
      "id": 42,
      "domanda": "Cosa sono i web worker in JavaScript?",
      "varianti_domanda": [
        "Come implementare multithreading in JavaScript",
        "Come eseguire operazioni in background con JavaScript",
        "Differenza tra web worker, service worker e shared worker",
        "Vantaggi di usare web worker per performance web"
      ],
      "risposta": "I Web Worker sono una funzionalità di JavaScript che permette di eseguire script in thread background separati dal thread principale dell'interfaccia utente. Questo consente di eseguire operazioni computazionalmente intensive senza bloccare la UI. I Web Worker non hanno accesso al DOM, agli oggetti window e document, ma possono comunicare col thread principale attraverso il sistema di messaggi. Esempio base: 'const worker = new Worker('worker.js'); worker.postMessage(data); worker.onmessage = (e) => console.log(e.data);'. Esistono tre tipi: 1) Dedicated Worker (standard): usato da una singola script. 2) Shared Worker: accessibile da multiple script, anche da finestre diverse. 3) Service Worker: funziona come proxy di rete per pagine web, permettendo caching e funzionalità offline. I Web Worker sono ideali per elaborazione di dati, calcoli complessi, parsing di grandi JSON, e operazioni di rete in background. Limitazioni includono l'overhead di serializzazione dei dati tra thread e il costo di creazione di nuovi thread.",
      "level": "advanced",
      "category": "web_development"
    },
    {
      "id": 43,
      "domanda": "Come funzionano i context manager in Python?",
      "varianti_domanda": [
        "Come usare with statement in Python?",
        "Come creare un context manager personalizzato?",
        "Esempi e vantaggi dei context manager",
        "Implementazione di __enter__ e __exit__ in Python"
      ],
      "risposta": "I context manager in Python facilitano la gestione delle risorse garantendo la loro corretta acquisizione e rilascio, anche in caso di errori. Si usano con lo statement 'with', ad esempio: 'with open('file.txt') as f: contenuto = f.read()'. Dietro le quinte, il context manager implementa due metodi: __enter__ che viene chiamato all'inizio del blocco with e restituisce una risorsa, e __exit__ chiamato alla fine per rilasciare la risorsa. Per creare un context manager personalizzato, esistono due approcci: 1) Classe con metodi __enter__ e __exit__: 'class MioManager: def __enter__(self): return risorsa; def __exit__(self, exc_type, exc_val, exc_tb): cleanup()'. 2) Decorator @contextmanager più semplice: 'from contextlib import contextmanager; @contextmanager; def mio_manager(): try: yield risorsa; finally: cleanup()'. I context manager sono ideali per file, connessioni database, lock, transazioni e qualsiasi risorsa che richiede cleanup. Il modulo contextlib offre anche utilities come suppress, ExitStack e nullcontext.",
      "level": "intermediate",
      "category": "python"
    },
    {
      "id": 44,
      "domanda": "Cosa sono le code di messaggi (message queues) e quando usarle?",
      "varianti_domanda": [
        "Come funzionano RabbitMQ, Kafka e altri message broker",
        "Architetture basate su code di messaggi",
        "Vantaggi dei sistemi di messaggistica asincrona",
        "Differenza tra message queue e publish-subscribe"
      ],
      "risposta": "Le code di messaggi sono sistemi di comunicazione asincrona tra componenti software che permettono di disaccoppiare i produttori di messaggi dai consumatori. Funzionano come intermediari (broker) che ricevono, memorizzano e instradano messaggi. Le principali implementazioni includono: 1) RabbitMQ: versatile, supporta multipli protocolli e pattern di routing. 2) Apache Kafka: alta throughput, focus su streaming e persistenza log. 3) Redis Pub/Sub: leggero, performante ma con minori garanzie di consegna. 4) AWS SQS/SNS: servizi gestiti cloud. I vantaggi includono: disaccoppiamento dei servizi, bilanciamento del carico, resilienza (i messaggi persistono se il consumatore è offline), scalabilità e picchi di gestione. Si distinguono due pattern principali: point-to-point (ogni messaggio va a un solo consumatore) e publish-subscribe (messaggi distribuiti a tutti i sottoscrittori). Le code di messaggi sono fondamentali nelle architetture a microservizi, sistemi distribuiti ed elaborazione asincrona di job, particolarmente utili quando i servizi hanno diverse velocità di elaborazione o richiedono comunicazione affidabile.",
      "level": "intermediate",
      "category": "architettura_software"
    },
    {
      "id": 45,
      "domanda": "Come scrivere documentazione efficace per il codice?",
      "varianti_domanda": [
        "Best practice per documentare progetti software",
        "Strumenti per generare documentazione da codice",
        "Come scrivere docstring in Python",
        "Importanza e tecniche di documentazione tecnica"
      ],
      "risposta": "Una documentazione efficace è cruciale per la manutenibilità del software. Per documentare bene il codice: 1) Usa docstring/commenti per spiegare il perché, non solo il cosa (che dovrebbe essere chiaro dal codice stesso). 2) Segui convenzioni standard come Google Style, NumPy Style o reStructuredText in Python. 3) Documenta API pubbliche, parametri, valori di ritorno, eccezioni e esempi d'uso. 4) Mantieni la documentazione aggiornata con il codice. 5) Include README, guide di installazione/utilizzo e documentazione architetturale. Gli strumenti per generare documentazione includono Sphinx per Python, JavaDoc per Java, Doxygen (multilingua) e JSDoc per JavaScript. Una buona docstring in Python descrive lo scopo della funzione, parametri, return e gestione errori: 'def func(param): \"\"\"Descrizione. Args: param: cosa fa. Returns: cosa ritorna. Raises: quali eccezioni.\"\"\"'. La documentazione dovrebbe essere accessibile a diversi livelli: quick start per principianti, guide per casi d'uso comuni, e reference completo per esperti. Test e documentazione sono complementari: buoni test documentano il comportamento atteso e la documentazione spiega perché esiste quel comportamento.",
      "level": "intermediate",
      "category": "best_practices"
    }
  ]
}

[end of data/knowledge_base.json]
